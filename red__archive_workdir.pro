; docformat = 'rst'

;+
; Archive a work directory to /storage/scince_workdirs to save space
; on /scratch and keep all valuable files. Archived work directories 
; are also backed up on tapes. Scientific cubes should be exported to
; the archive with aid of red__fitscube_export. A working directory on
; /scratch should be removed after archiving. 
;
; Program generates a shell script which can be edited and executed.
;
; :Categories:
;
;    SST pipeline
; 
; 
; :Author:
;
;    Oleksii Andriienko, Institute for Solar Physics
;
; :Keywords:
;
;   sudo : in, optional, type=boolean
;
;     Add to shell script lines to remove raw calibration data files from
;     /data. One need to have administrator rights to execute them.
;
; :History:
;
;   2023-05-02 : OA. First version.
;
;-
pro red::archive_workdir, sudo=sudo

  inam = red_subprogram(/low, calling = inam1)
  
  isodate = self.isodate
  instrument = typename(self)
  if instrument eq 'CRISP2' then instrument='CRISP'
  outdir='/storage/science_workdirs/' + isodate + '/' + instrument + '/'

  openw, /get_lun, lun, 'archive_workdir.sh'
  printf, lun, '#!/bin/bash'
  printf, lun
  printf, lun, '# This file was generated by '+inam+'.'
  printf, lun, '# Please inspect and edit it as needed. Then execute at your own risk.'
  printf, lun
  printf, lun, 'mkdir /storage/science_workdirs/' + isodate
  printf, lun, 'mkdir ' + outdir
  printf, lun  

  ;; Summed calibrations data and raw data dirs:
  ;; darks, flats, pinholes, polcals
  ;;
  ;; We copy summed files and remove raw data files from /scratch
  ;;
  if instrument eq 'CHROMIS' then begin
    summed_dirs = ['darks','flats','pinhs']
    dirs_ptr = [self.dark_dir, self.flat_dir, self.pinh_dirs]
  endif else begin              ; CRISP
    summed_dirs = ['darks','flats','pinhs','polcal_sums']
    dirs_ptr = [self.dark_dir, self.flat_dir, self.pinh_dirs, self.polcal_dir]
  endelse
  
  for ii = 0, n_elements(summed_dirs)-1 do begin
    if file_test(summed_dirs[ii]) then begin
      tar_fn = summed_dirs[ii] + '.tar'
      printf, lun, 'tar -cf ' + tar_fn + ' ' + summed_dirs[ii] + ' --remove-files'
      printf, lun, 'cp ' + tar_fn + ' ' + outdir
    endif else printf, lun, "#  WARNING: '" + summed_dirs[ii] + "' directory doesn't exist!"
    if keyword_set(sudo) then begin
      if ptr_valid(dirs_ptr[ii]) then begin 
        dat_dirs = [*dirs_ptr[ii]]
        ss = strsplit(dat_dirs[0],'/',/extract)
        dat_dir = '/' + strjoin(ss[0:4],'/')
        printf, lun, 'sudo rm -r ' + dat_dir      
      endif else printf, lun, "#  WARNING: raw '" + summed_dirs[ii] + "' directory is undefined!"
    endif else $
      printf, lun, "# INFO: Please ask system administrator to remove raw " + summed_dirs[ii] + $
               " from '/storage'."
    printf, lun
  endfor

  ;; Small files we want to be in tar archive
  ;;
  print
  print, inam + ' : '
  print, "   You might wish to put your files with notes/scripts/etc. to 'notes' directory to be archived."
  print, "   Please press any key when you are ready."
  qq = get_kbrd()
  tar_fn = 'auxiliary_dirs.tar'
  if file_test('config.txt') then begin 
    printf, lun, 'tar -cf ' + tar_fn + ' config.txt'
    printf, lun
  endif else begin
    printf, lun, "#  WARNING: 'config.txt' file doesn't exist!"
    printf, lun, 'touch ' + tar_fn
    printf, lun
  endelse
  if file_test('doit.pro') then $
    printf, lun, 'tar -rf ' + tar_fn + ' doit.pro ' $
  else $
    printf,"#  WARNING: 'doit.pro' file doesn't exist!"
  printf, lun

  dirs = ['link_scripts','downloads','info','prefilter_fits','*intensities','calib','pipeline-log','notes']
  if instrument eq 'CRISP' then $
    dirs = [dirs,'polcal'] $
  else $ ; CHROMIS
    dirs = [dirs,'align']
  for ii = 0, n_elements(dirs)-1 do begin
    if file_test(dirs[ii]) then begin
      printf, lun, 'tar -rf ' + tar_fn + ' ' + dirs[ii]
    endif else printf, lun, "#  WARNING: '" + dirs[ii] + "' directory doesn't exist!"
    printf, lun
  endfor
  printf, lun, 'gzip ' + tar_fn
  printf, lun , 'cp ' + tar_fn + '.gz' + ' ' + outdir
  printf, lun

  ;; Let's keep momfbd cfg files and fits headers in separate tar files
  ;; 
  momfbd_dirs = file_search('momfbd*/??:??:??', count = Nmomfbd)
  if Nmomfbd gt 0 then begin
    printf, lun, 'mkdir ' + outdir + 'momfbd_cfg'
    printf, lun
    printf, lun, '# WARNING: you have to remove momfbd files before running following lines.'
    printf, lun
    for ii = 0, Nmomfbd-1 do begin
      ss = strsplit(momfbd_dirs[ii],'/',/extract)
      zz = strsplit(ss[1],':',/extract)
      ts = strjoin(zz,'-')
      tar_fn = ts + '_momfbd_cfg.tar'
      lines_dirs = file_search(momfbd_dirs[ii]+'/[3-9][0-9][0-9][0-9]/cfg', count = Nlines)
      if Nlines gt 0 then begin
        printf, lun, 'tar -cf ' + tar_fn + ' ' + lines_dirs[0] + '/*.cfg'
        if file_test(lines_dirs[0] + '/fov_mask.fits') then $
          printf, lun, 'tar -rf ' + tar_fn + ' ' + lines_dirs[0] + '/fov_mask.fits'
        printf, lun, 'tar -rf ' + tar_fn + ' ' + lines_dirs[0] + '/results/'
        for jj = 1, Nlines-1 do begin
          if file_test(lines_dirs[jj] + '/fov_mask.fits') then $
            printf, lun, 'tar -rf ' + tar_fn + ' ' + lines_dirs[jj] + '/fov_mask.fits'
          printf, lun, 'tar -rf ' + tar_fn + ' ' + lines_dirs[jj] + '/*.cfg'
          printf, lun, 'tar -rf ' + tar_fn + ' ' + lines_dirs[jj] + '/results/'
        endfor
        printf, lun, 'gzip ' + tar_fn
        printf, lun, 'cp ' + tar_fn  + '.gz' + ' ' + outdir + 'momfbd_cfg/'
        printf, lun
     endif else printf, lun, '# WARNING: ' + momfbd_dirs[ii] + ' is empty.'
    endfor
    printf,lun
  endif else  printf, lun, "#  WARNING: there are no momfbd directories!"
  
  ;; Intermidiate data we want to archive as it takes quite some time to make them
  ;;
  if instrument eq 'CRISP' then begin
    cmap_intdif_dirs = file_search('cmap_intdif/*', count = Ndirs)
    if Ndirs gt 0 then begin     
      printf, lun, 'mkdir ' + outdir + 'cmap_intdif'
      printf, lun
      for ii = 0, Ndirs-1 do begin
        ss = strsplit(cmap_intdif_dirs[ii],'/',/extract)
        zz = strsplit(ss[1],':',/extract)
        ts = strjoin(zz,'-')
        tar_fn = 'cmap_intdif_' + ts + '.tar'        
        printf, lun, 'tar -cf ' + tar_fn + ' ' + cmap_intdif_dirs[ii]
        printf, lun, 'cp ' + tar_fn + ' ' + outdir + 'cmap_intdif/'
        printf, lun
      endfor      
    endif else printf, lun, "#  WARNING: 'cmap_intdif' directory doesn't exist!"
  endif

  spawn, 'chmod u+x archive_workdir.sh'
  print
  print, inam + ' : '
  print, '   Please inspect the new file "archive_workdir.sh"'
  print, '   Edit it as needed and execute it at your own risk.'
  print, '   Then delete this working directory.'
  print
  if ~keyword_set(sudo) then $
    print, "Please ask system administrator to remove raw calibration files from '/storage'."
  
  free_lun, lun
end
